package library.dao.repositories.impl;

import library.dao.mappers.IMapper;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import library.dao.mappers.IMapper;
import library.dao.mappers.AdressMapper;
import library.dao.repositories.IAdressRepository;
import library.dao.uow.IUnitOfWork;
import library.domain.Adress;



public class AdressRepository extends RepositoryBase<Adress> implements IAdressRepository {
    protected PreparedStatement selectByCity;
    protected PreparedStatement selectByPostal;
    protected PreparedStatement selectByStreet;

    private void selectStatements(Connection connection) throws SQLException {
        selectByCity = connection.prepareStatement( "SELECT * FROM adress WHERE city=?");
        selectByPostal = connection.prepareStatement( "SELECT * FROM adress WHERE postalCode=?");
        selectByStreet = connection.prepareStatement( "SELECT * FROM adress WHERE street=?");
    }
    public AdressRepository(Connection connection, IMapper<Adress> mapper, IUnitOfWork uow) throws SQLException{
        super(connection, mapper, uow);
    }

    @Override
    protected String createTableSql() {
        return "CREATE TABLE adress("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                + "city VARCHAR(20),"
                + "postalCode Varchar(7),"
                + "street VARCHAR(32),"
                + "apNumber VARCHAR(8)"
                + ")";
    }

    @Override
    protected String getUpdateSql() {
        return "UPDATE adress SET (city, postalCode, street, apNumber)=(?,?,?,?) WHERE id=?";
    }

    @Override
    protected String getTableName() {
        return "adress";
    }

    @Override
    protected String getInsertSql() {
        return "INSERT INTO adress(city,postalCode,street,apNumber) VALUES(?,?,?,?)";
    }

    @Override
    protected void setUpdate(Adress adress) throws SQLException {
        update.setString(1, adress.getCity());
        update.setString(2, adress.getPostalCode());
        update.setString(3, adress.getStreet());
        update.setString(4, adress.getApNumber());
        update.setInt(5, adress.getId());
    }

    protected void setInsert(Adress adress) throws SQLException {
        insert.setString(1,adress.getCity());
        insert.setString(2,adress.getPostalCode());
        insert.setString(3,adress.getStreet());
        insert.setString(4,adress.getApNumber());
}
    public List<Adress> withCity(String city) {

        List<Adress> Adresses = new ArrayList<Adress>();
        try {
            ResultSet rs = selectByCity.executeQuery();
            while(rs.next()){
                Adresses.add(_mapper.map(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Adresses;

    }

    public List<Adress> withPostal(String postal) {
        List<Adress> Adresses = new ArrayList<Adress>();
        try {
            ResultSet rs = selectByPostal.executeQuery();
            while(rs.next()){
                Adresses.add(_mapper.map(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Adresses;
    }
    public List<Adress> withStreet(String street) {
        List<Adress> Adresses = new ArrayList<Adress>();
        try {
            ResultSet rs = selectByStreet.executeQuery();
            while(rs.next()){
                Adresses.add(_mapper.map(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Adresses;
    }

}
